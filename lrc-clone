#!/usr/bin/env bash

if test -z "$1" ; then
    echo "usage: $0 backup-destination-dev" >&2
    exit 1
fi

set -u

DEV=$1
PART=${DEV}1
TMNT=
MNT=

PATH=/usr/sbin:/sbin:$PATH

die () {
	echo "error: $@, exiting"
	exit 1
}

run-cmd () {
	echo "$1"
	eval "$1"
}

second-guess () {
	echo -n "Use $DEV? (y/n) [n]: "
	read yesno
	if [ "$yesno" != "y" ] ; then
		exit
	fi
}

mount-device () {
	MNT=$(cat /proc/mounts | grep $PART | cut -d\  -f2)
	if (( $? == 0 )) ; then
		TMNT=$(mktemp -d /tmp/backup/dst.XXXXX)
		MNT=$TMNT
		mkdir -p $MNT || die "unable to mkdir $MNT"
		mount $PART $MNT || die "unable to mount $PART on $MNT"
	fi
	echo "$PART mounted on $MNT"
}

trim-comments () {
	sed 's/#.*$//g' | sed 's/[ \t]*$//g' | grep -v "^$"
}

trim-fstab () {
	cat /etc/fstab | trim-comments | awk '{printf "%s %s %s\n", $1, $2, $3}'
}

clone-fs () {
	local SRC=$(mktemp -d /tmp/backup/src.XXXXX)

	# remount everything in fstab on a temporary mount point
	while read dev mnt fs rest ; do
		if [ "$mnt" != "none" ] ; then
			run-cmd "mount $dev $SRC${mnt}"
		fi
	done < <(LC_ALL=C trim-fstab | sort -k2) # LC_ALL is so sort doesn't ignore '/' characters

	# rsync the temporary mount point SRC to the target device
	echo "cloning $SRC to $MNT..."
	rsync -aEHSv --delete --exclude tmp \
		$SRC/* \
		$MNT/. || die "rsync failed"
	mkdir -p $MNT/tmp

	# umount everything in the temporary mount point (in reverse order with sort -r)
	while read dev mnt fs rest ; do
		if [ "$mnt" != "none" ] ; then
			run-cmd "umount $SRC${mnt}"
		fi
	done < <(LC_ALL=C trim-fstab | sort -r -k2) # LC_ALL is so sort doesn't ignore '/' characters

	rmdir $SRC
}

rewrite-grub () {
	echo "installing GRUB2 on $DEV..."

	for d in dev proc run sys ; do
		mkdir -p $MNT/$d
		mount --bind /$d $MNT/$d || die "failed to mount --bind /$d $MNT/$d"
	done

cat << EOF > $MNT/etc/default/grub
GRUB_DEFAULT=0
GRUB_TIMEOUT=20
#GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo "Reuben Reboot Lunux Backup"`
GRUB_DISTRIBUTOR="Reuben Reboot Lunux Backup"
#GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
GRUB_CMDLINE_LINUX=""
EOF

cat << EOF > $MNT/tmp/grub.sh
#!/usr/bin/env bash
sed -i 's/GRUB_TIMEOUT=.*$/GRUB_TIMEOUT=30/g' /etc/default/grub
echo GRUB_DISABLE_OS_PROBER=true >> /etc/default/grub
grub-install $DEV
update-grub
EOF

	chmod +x $MNT/tmp/grub.sh
	(
		chroot $MNT /tmp/grub.sh
	)
	rm $MNT/tmp/grub.sh

	for d in dev proc run sys ; do
		umount $MNT/$d
	done
}

rewrite-fstab () {
	echo "writing new $MNT/etc/fstab..."
	local UUID=$(blkid $PART | cut -d\" -f2)

cat << EOF > $MNT/etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
UUID=$UUID / auto errors=remount-ro 0 1
none /tmp tmpfs defaults 0 0
EOF

}

cleanup () {
	if [ "$TMNT" != "" ] ; then
		umount $TMNT && rmdir $TMNT
	fi
}

main () {
	mkdir -p /tmp/backup
	second-guess
	mount-device
	clone-fs
	rewrite-fstab
	rewrite-grub
	cleanup
}

main

