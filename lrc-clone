#!/usr/bin/env bash

if test -z "$1" ; then
    echo "usage: $0 spec-file" >&2
    exit 1
fi

set -u
set -e
#set -x

SPEC=$1
BOOTDEV=$(cat $SPEC | sed 's/[ \t]\+$//g' | grep 'boot-loader$' | sed 's/[ \t]\+/ /g' | cut -d\  -f1)

PATH=/usr/sbin:/sbin:$PATH

die () {
	echo "error: $@, exiting"
	exit 1
}

run-cmd () {
	echo "$1"
	eval "$1"
}

second-guess () {
	echo -n "Use $BOOTDEV? (y/n) [n]: "
	read yesno
	if [ "$yesno" != "y" ] ; then
		exit
	fi
}

trim-comments () {
	sed 's/#.*$//g' | sed 's/[ \t]*$//g' | grep -v "^$"
}

trimfile () {
	cat $1 | trim-comments | awk '{printf "%s %s %s\n", $1, $2, $3}'
}

mount-target-fs () {
	while read dev mnt rest ; do
		if [ "$mnt" != "boot-loader" ] ; then
			mkdir -p $DST${mnt}
			run-cmd "mount $dev $DST${mnt}"
		fi
	done < <(LC_ALL=C trimfile $SPEC | ./csort -k2)
}

clone-fs () {

	# remount everything in fstab on a temporary mount point
	while read dev mnt fs rest ; do
		if [ "$dev" != "none" ] ; then
			run-cmd "mount $dev $SRC${mnt}"
		fi
	done < <(LC_ALL=C trimfile /etc/fstab | ./csort -k2)

	# rsync the temporary mount point SRC to the target device
	echo "cloning $SRC to $DST"
	rsync -aEHSv --delete --exclude tmp \
		$SRC/* \
		$DST/. || die "rsync failed"
	mkdir -p $DST/tmp

	# umount everything in the temporary mount point (in reverse order with ./csort -r)
	while read dev mnt fs rest ; do
		if [ "$dev" != "none" ] ; then
			run-cmd "umount $SRC${mnt}"
		fi
	done < <(LC_ALL=C trimfile /etc/fstab | ./csort -r -k2)
}

rewrite-grub () {
	echo "installing GRUB2 on $BOOTDEV"

	for d in dev proc run sys ; do
		mkdir -p $DST/$d
		mount --bind /$d $DST/$d || die "failed to mount --bind /$d $DST/$d"
	done

	mkdir -p $DST/etc/default

cat << EOF > $DST/etc/default/grub
GRUB_DEFAULT=0
GRUB_TIMEOUT=20
#GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo "Reuben Reboot Lunux Backup"`
GRUB_DISTRIBUTOR="Reuben Reboot Lunux Backup"
#GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
GRUB_CMDLINE_LINUX=""
EOF

cat << EOF > $DST/tmp/grub.sh
#!/usr/bin/env bash
sed -i 's/GRUB_TIMEOUT=.*$/GRUB_TIMEOUT=30/g' /etc/default/grub
echo GRUB_DISABLE_OS_PROBER=true >> /etc/default/grub
grub-install $BOOTDEV
update-grub
EOF

	chmod +x $DST/tmp/grub.sh
	(
		chroot $DST /tmp/grub.sh
	)
	rm $DST/tmp/grub.sh

	for d in dev proc run sys ; do
		umount $DST/$d
	done
}

rewrite-fstab () {
	echo "writing new $DST/etc/fstab..."

	mkdir -p $DST/etc

cat << EOF > $DST/etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
EOF

	while read dev mnt rest ; do
		if [ "$mnt" != "boot-loader" ] ; then
			local UUID=$(blkid $dev| cut -d\" -f2)
			if [ "$mnt" = "/" ] ; then
				pass=1
			else
				pass=0
			fi

cat << EOF >> $DST/etc/fstab
UUID=$UUID $mnt auto defaults 0 $pass
EOF
		fi
	done < <(LC_ALL=C trimfile $SPEC | ./csort -k2)

cat << EOF >> $DST/etc/fstab
none /tmp tmpfs defaults 0 0
EOF

	cat $DST/etc/fstab
}

unmount-target-fs () {
	while read dev mnt rest ; do
		if [ "$mnt" != "boot-loader" ] ; then
			run-cmd "umount $DST${mnt}"
		fi
	done < <(LC_ALL=C trimfile $SPEC | ./csort -r -k2)
	sleep 1
}

tag-clone () {
	srcuuid=unknown
	while read dev mnt rest ; do
		if [ "$mnt" == "/" ] ; then
			srcuuid=$(blkid -s UUID -o value $dev)
			break
		fi
	done < <(cat /proc/mounts)

	mkdir -p $DST/etc/lrc-clone
	echo "$srcuuid $(date)" >> $DST/etc/lrc-clone/tag.txt
}

cleanup () {
	unmount-target-fs
	sleep 2
	rmdir $DST
	rmdir $SRC
	rmdir /tmp/backup
}

main () {
	second-guess
	mount-target-fs
	trap "cleanup ; exit" INT TERM EXIT
	clone-fs
	rewrite-fstab
	rewrite-grub
	tag-clone
}

mkdir -p /tmp/backup
DST=$(mktemp -d /tmp/backup/dst.XXXXX)
SRC=$(mktemp -d /tmp/backup/src.XXXXX)
main

